{"ast":null,"code":"var _jsxFileName = \"C:\\\\ar\\\\CAFE\\\\scrapegit\\\\platform1\\\\src\\\\components\\\\DepartureTime.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './DepartureTime.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Helper function to parse time strings (HH:MM)\nconst parseTime = timeStr => {\n  const [hours, minutes] = timeStr.split(':').map(Number);\n  const date = new Date();\n  date.setHours(hours, minutes, 0, 0);\n  return date;\n};\nexport const DepartureTime = () => {\n  _s();\n  const [apiData, setApiData] = useState(null);\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchDepartures = async () => {\n    // Don't reset loading state on subsequent fetches\n    if (apiData === null) {\n      setIsLoading(true);\n    }\n    try {\n      const response = await fetch('http://localhost:5000/api/departures');\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('API Response:', data);\n      setApiData(data);\n      setError(null);\n    } catch (e) {\n      const errorMessage = `Failed to fetch departures: ${e instanceof Error ? e.message : String(e)}`;\n      console.error('Error details:', e);\n      // Only set error if it's the initial load or a different error\n      if (apiData === null || error !== errorMessage) {\n        setError(errorMessage);\n      }\n    } finally {\n      // Only set loading to false on initial load\n      if (isLoading) {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  // Effect for fetching data periodically\n  useEffect(() => {\n    fetchDepartures(); // Initial fetch\n    const fetchInterval = setInterval(fetchDepartures, 5 * 60 * 1000); // Fetch every 5 mins\n    return () => clearInterval(fetchInterval);\n  }, []);\n\n  // Effect for updating current time every minute\n  useEffect(() => {\n    const timeInterval = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 60 * 1000); // Update every minute\n    return () => clearInterval(timeInterval);\n  }, []);\n  const calculateMinutesUntil = departure => {\n    try {\n      // Prioritize live time if available\n      const departureTimeStr = departure.live_time || departure.scheduled_time;\n      if (!departureTimeStr) return null;\n      const departureTime = parseTime(departureTimeStr);\n\n      // Adjust for potentially being the next day\n      if (departureTime < currentTime && currentTime.getHours() > departureTime.getHours()) {\n        departureTime.setDate(departureTime.getDate() + 1);\n      }\n      const diffMillis = departureTime.getTime() - currentTime.getTime();\n\n      // Only show positive differences (upcoming trains)\n      return diffMillis > 0 ? Math.ceil(diffMillis / 60000) : null;\n    } catch (err) {\n      console.error(\"Error calculating minutes until:\", err, departure);\n      return null;\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"departure-time\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"Loading initial departure times...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Show error prominently only if initial load failed\n  if (error && !apiData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"departure-time\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchDepartures,\n        className: \"retry-button\",\n        children: \"Retry Initial Load\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this);\n  }\n  const departures = (apiData === null || apiData === void 0 ? void 0 : apiData.departures) || [];\n  const lastUpdated = apiData === null || apiData === void 0 ? void 0 : apiData.lastUpdated;\n\n  // Filter and sort departures based on calculated minutes until\n  const upcomingDepartures = departures.map(dep => ({\n    ...dep,\n    minutesUntil: calculateMinutesUntil(dep)\n  })).filter(dep => dep.minutesUntil !== null && dep.minutesUntil >= 0).sort((a, b) => a.minutesUntil - b.minutesUntil);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"departure-time\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"station-image\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/train-station.jpg\",\n        alt: \"Train Station\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), error && apiData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error subtle-error\",\n      children: [\"Failed to refresh data: \", error, \". Displaying last known data.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"departures-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Next Trains\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), upcomingDepartures.length > 0 ? upcomingDepartures.slice(0, 5).map((departure, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"departure-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"time\",\n          children: [departure.scheduled_time, departure.live_time && departure.live_time !== departure.scheduled_time && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"live-time-actual\",\n            children: [\" (\", departure.live_time, \" Live)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"destination\",\n          children: departure.destination\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"minutes-until\",\n          children: [departure.minutesUntil, \" min\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-departures\",\n        children: \"No upcoming departures found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), lastUpdated && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"last-updated\",\n      children: [\"Data last fetched: \", lastUpdated, (apiData === null || apiData === void 0 ? void 0 : apiData.updating) && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"updating-indicator\",\n        children: \" (Updating...)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n};\n_s(DepartureTime, \"rHf7ug4wLv0046HGK+ZIBQud2kQ=\");\n_c = DepartureTime;\nvar _c;\n$RefreshReg$(_c, \"DepartureTime\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","parseTime","timeStr","hours","minutes","split","map","Number","date","Date","setHours","DepartureTime","_s","apiData","setApiData","currentTime","setCurrentTime","isLoading","setIsLoading","error","setError","fetchDepartures","response","fetch","ok","Error","status","data","json","console","log","e","errorMessage","message","String","fetchInterval","setInterval","clearInterval","timeInterval","calculateMinutesUntil","departure","departureTimeStr","live_time","scheduled_time","departureTime","getHours","setDate","getDate","diffMillis","getTime","Math","ceil","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","departures","lastUpdated","upcomingDepartures","dep","minutesUntil","filter","sort","a","b","src","alt","length","slice","index","destination","updating","_c","$RefreshReg$"],"sources":["C:/ar/CAFE/scrapegit/platform1/src/components/DepartureTime.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './DepartureTime.css';\r\n\r\ninterface Departure {\r\n  scheduled_time: string;\r\n  live_time: string | null;\r\n  destination: string;\r\n}\r\n\r\ninterface ApiResponse {\r\n  departures: Departure[];\r\n  lastUpdated: string;\r\n  updating: boolean;\r\n}\r\n\r\n// Helper function to parse time strings (HH:MM)\r\nconst parseTime = (timeStr: string): Date => {\r\n  const [hours, minutes] = timeStr.split(':').map(Number);\r\n  const date = new Date();\r\n  date.setHours(hours, minutes, 0, 0);\r\n  return date;\r\n};\r\n\r\nexport const DepartureTime: React.FC = () => {\r\n  const [apiData, setApiData] = useState<ApiResponse | null>(null);\r\n  const [currentTime, setCurrentTime] = useState(new Date());\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchDepartures = async () => {\r\n    // Don't reset loading state on subsequent fetches\r\n    if (apiData === null) {\r\n      setIsLoading(true);\r\n    }\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/departures');\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const data: ApiResponse = await response.json();\r\n      console.log('API Response:', data);\r\n      setApiData(data);\r\n      setError(null);\r\n    } catch (e) {\r\n      const errorMessage = `Failed to fetch departures: ${e instanceof Error ? e.message : String(e)}`;\r\n      console.error('Error details:', e);\r\n      // Only set error if it's the initial load or a different error\r\n      if (apiData === null || error !== errorMessage) {\r\n         setError(errorMessage);\r\n      }\r\n    } finally {\r\n      // Only set loading to false on initial load\r\n      if (isLoading) {\r\n        setIsLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Effect for fetching data periodically\r\n  useEffect(() => {\r\n    fetchDepartures(); // Initial fetch\r\n    const fetchInterval = setInterval(fetchDepartures, 5 * 60 * 1000); // Fetch every 5 mins\r\n    return () => clearInterval(fetchInterval);\r\n  }, []);\r\n\r\n  // Effect for updating current time every minute\r\n  useEffect(() => {\r\n    const timeInterval = setInterval(() => {\r\n      setCurrentTime(new Date());\r\n    }, 60 * 1000); // Update every minute\r\n    return () => clearInterval(timeInterval);\r\n  }, []);\r\n\r\n  const calculateMinutesUntil = (departure: Departure): number | null => {\r\n    try {\r\n      // Prioritize live time if available\r\n      const departureTimeStr = departure.live_time || departure.scheduled_time;\r\n      if (!departureTimeStr) return null;\r\n\r\n      const departureTime = parseTime(departureTimeStr);\r\n      \r\n      // Adjust for potentially being the next day\r\n      if (departureTime < currentTime && currentTime.getHours() > departureTime.getHours()) {\r\n         departureTime.setDate(departureTime.getDate() + 1);\r\n      }\r\n\r\n      const diffMillis = departureTime.getTime() - currentTime.getTime();\r\n      \r\n      // Only show positive differences (upcoming trains)\r\n      return diffMillis > 0 ? Math.ceil(diffMillis / 60000) : null;\r\n\r\n    } catch (err) {\r\n        console.error(\"Error calculating minutes until:\", err, departure);\r\n        return null;\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"departure-time\">\r\n        <div className=\"loading\">Loading initial departure times...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Show error prominently only if initial load failed\r\n  if (error && !apiData) {\r\n    return (\r\n      <div className=\"departure-time\">\r\n        <div className=\"error\">{error}</div>\r\n        <button onClick={fetchDepartures} className=\"retry-button\">\r\n          Retry Initial Load\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  const departures = apiData?.departures || [];\r\n  const lastUpdated = apiData?.lastUpdated;\r\n\r\n  // Filter and sort departures based on calculated minutes until\r\n  const upcomingDepartures = departures\r\n    .map(dep => ({ ...dep, minutesUntil: calculateMinutesUntil(dep) }))\r\n    .filter(dep => dep.minutesUntil !== null && dep.minutesUntil >= 0)\r\n    .sort((a, b) => a.minutesUntil! - b.minutesUntil!);\r\n\r\n  return (\r\n    <div className=\"departure-time\">\r\n      <div className=\"station-image\">\r\n        <img src=\"/images/train-station.jpg\" alt=\"Train Station\" />\r\n      </div>\r\n      \r\n      {error && apiData && (\r\n          <div className=\"error subtle-error\">Failed to refresh data: {error}. Displaying last known data.</div>\r\n      )}\r\n\r\n      <div className=\"departures-container\">\r\n        <h2>Next Trains</h2>\r\n        {upcomingDepartures.length > 0 ? (\r\n          upcomingDepartures.slice(0, 5).map((departure, index) => (\r\n            <div key={index} className=\"departure-item\">\r\n              <div className=\"time\">\r\n                {departure.scheduled_time}\r\n                {departure.live_time && departure.live_time !== departure.scheduled_time && (\r\n                  <span className=\"live-time-actual\"> ({departure.live_time} Live)</span>\r\n                )}\r\n              </div>\r\n              <div className=\"destination\">{departure.destination}</div>\r\n              <div className=\"minutes-until\">\r\n                {departure.minutesUntil} min\r\n              </div>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <div className=\"no-departures\">No upcoming departures found.</div>\r\n        )}\r\n      </div>\r\n\r\n      {lastUpdated && (\r\n        <div className=\"last-updated\">\r\n          Data last fetched: {lastUpdated}\r\n          {apiData?.updating && <span className=\"updating-indicator\"> (Updating...)</span>}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}